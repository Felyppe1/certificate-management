datasource db {
    provider  = "postgresql"
    url       = env("DB_URL")
    directUrl = env("DB_DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String  @id @default(cuid())
    email         String  @unique
    name          String
    password_hash String?

    Session             Session[]
    ExternalUserAccount ExternalUserAccount[]

    CertificateEmission CertificateEmission[]

    @@map("users")
}

model Session {
    token   String @id
    user_id String

    User User @relation(fields: [user_id], references: [id])

    @@map("sessions")
}

model ExternalUserAccount {
    user_id          String
    provider         String // "GOOGLE" | "GITHUB" | "FACEBOOK" | ...
    provider_user_id String

    access_token                  String
    refresh_token                 String?
    access_token_expiry_datetime  DateTime?
    refresh_token_expiry_datetime DateTime?

    User User @relation(fields: [user_id], references: [id])

    @@id([user_id, provider])
    @@unique([provider, provider_user_id])
    @@map("external_user_accounts")
}

model CertificateEmission {
    id         String   @id @default(cuid())
    title      String
    status     String // "DRAFT" | "EMITTED" | "SCHEDULED"
    created_at DateTime @default(now())

    user_id String

    User       User        @relation(fields: [user_id], references: [id])
    Template   Template?
    DataSource DataSource?

    @@map("certificate_emissions")
}

model Template {
    id String @id @default(cuid())

    drive_file_id    String?
    storage_file_url String?
    thumbnail_url    String?
    file_name        String
    input_method     String // "URL" | "GOOGLE_DRIVE" | "UPLOAD"
    file_extension   String

    certificate_emission_id String @unique

    TemplateVariable    TemplateVariable[]
    CertificateEmission CertificateEmission @relation(fields: [certificate_emission_id], references: [id])

    @@map("templates")
}

model TemplateVariable {
    template_id String
    name        String

    data_source_id   String?
    data_source_name String?

    Template         Template          @relation(fields: [template_id], references: [id], onDelete: Cascade)
    DataSourceColumn DataSourceColumn? @relation(fields: [data_source_id, data_source_name], references: [data_source_id, name])

    @@id([name, template_id])
    @@unique([data_source_id, data_source_name])
    @@map("template_variables")
}

model DataSource {
    id String @id @default(cuid())

    drive_file_id    String?
    storage_file_url String?
    thumbnail_url    String?
    file_name        String
    input_method     String // "URL" | "GOOGLE_DRIVE" | "UPLOAD"
    file_extension   String

    certificate_emission_id String @unique

    DataSourceColumn    DataSourceColumn[]
    CertificateEmission CertificateEmission @relation(fields: [certificate_emission_id], references: [id])
    DataSet             DataSet?

    @@map("data_sources")
}

model DataSourceColumn {
    data_source_id String
    name           String

    DataSource       DataSource        @relation(fields: [data_source_id], references: [id], onDelete: Cascade)
    TemplateVariable TemplateVariable?

    @@id([name, data_source_id])
    @@map("data_source_columns")
}

model DataSet {
    id   String @id @default(cuid())
    generation_status String // "PENDING" | "COMPLETED" | "FAILED"
    rows Json

    data_source_id String @unique

    DataSource DataSource @relation(fields: [data_source_id], references: [id])

    @@map("data_sets")
}

model Outbox {
    id         String   @id @default(cuid())
    event_type String
    payload    Json
    processed  Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("outbox")
}
